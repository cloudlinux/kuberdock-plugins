#!/usr/local/cpanel/3rdparty/bin/perl
use strict;

use lib '/usr/local/cpanel/whostmgr/docroot/cgi/KuberDock/libs';

use Cpanel::Logger ();
use Cpanel::PwCache ();
use KuberDock::Resellers;
use KuberDock::JSON;
use KuberDock::KCLI;
use KuberDock::PreApps;
use Data::Dumper;

use constant KUBERDOCK_CONFIG_PATH => '/var/cpanel/apps/kuberdock_whmcs.json';
 
my $stdin = <STDIN>;
chomp $stdin;
my ($uid, $function, $data) = split (/ /,$stdin,3);

my $user = (Cpanel::PwCache::getpwuid($uid))[0];
my $logger = Cpanel::Logger->new();
$logger->warn("KuberDock::Module called by user $user with function: $function");

if($function eq 'getConfig') {
    if(-e KUBERDOCK_CONFIG_PATH) {
        my $resellers = KuberDock::Resellers->new;
        my $json = KuberDock::JSON->new;
        my $config = $resellers->loadData();
        print $json->encode($config);
        exit(0);
    } else {
        print "KuberDock config file not exists. Please fill in 'Billing integration' tab via administrator interface";
        exit(1)
    }
}
elsif($function eq 'getGlobalTemplates') {
    my $apps = KuberDock::PreApps->new;
    my $json = KuberDock::JSON->new;
    print $json->encode([$apps->getList()]);
    exit(0);
}
elsif($function eq 'getGlobalTemplate') {
    if(!$data) {
        print "Template with id $data doesn't exist";
        exit(1);
    }
    KuberDock::KCLI::setResponseType(1);
    print KuberDock::KCLI::getTemplate($data);
    exit(0);
}
else {
    print "Invalid function specified to KuberDock::Module adminbin function";
    exit(1);
}

1;